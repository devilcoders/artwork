/*
* Reworked version of Skeleton V1.2
*
*-------------------------------------
*-------------------------------------
*
* Copyright 2011, Dave Gamache
* www.getskeleton.com
* Free to use under the MIT license.
* http://www.opensource.org/licenses/mit-license.php
* 6/20/2012
*/


/* Table of Contents
==================================================
    #Base 960 Grid
    #Tablet (Portrait)
    #Mobile (Portrait)
    #Mobile (Landscape)
    #Clearing */



/* #Base 960 Grid
================================================== */

    *, *:before, *:after { 
      -webkit-box-sizing: border-box;
      box-sizing: border-box; 
    }

    [data-grid-container] { 
      position: relative; 
      width:    $grid-width; 
      margin:   0 auto; 
      padding:  0; 

      [data-grid-column], [data-grid-columns] {
        float:    left; 
        display:  inline; 
        padding:  0 $grid-column-gutter;
      }

      [data-grid-row] {
        margin:   0 auto 1.5em;
        overflow: hidden;

        [data-grid-column]:first-child {
          padding-left: 0;
        }
        [data-grid-column]:last-child {
          padding-right: 0;
        }
      }

      @for $column from 1 through $grid-columns {
        [data-grid-column="#{$column}"] {
          width: (100/$grid-columns) * $column * 1%;
        }
      }

      @for $column from 1 through ($grid-columns - 1) {
        [data-grid-offset="#{$column}"] {
          margin-left: (100/$grid-columns) + ((100/$grid-columns) * $column);
        }
      }
    }
    
    

@media only screen and (max-width: 1023px) {

  [data-grid-container] { 
    width: 960px;

    @for $column from 1 through $grid-columns {
      [data-grid-column="#{$column}"] {
        width: (100/$grid-columns) * $column;
      }
    }

    @for $column from 1 through ($grid-columns - 1) {
      [data-grid-offset="#{$column}"] {
        margin-left: (100/$grid-columns) + ((100/$grid-columns) * $column);
      }
    }
  }

}

/* #Tablet (Portrait)
================================================== */

    /* Note: Design for a width of 768px */

    @media only screen and (min-width: 768px) and (max-width: 959px) {
      [data-grid-container] { 
        width: 768px;

        @for $column from 1 through $grid-columns {
          [data-grid-column="#{$column}"] {
            width: (100/$grid-columns) * $column;
          }
        }

        @for $column from 1 through ($grid-columns - 1) {
          [data-grid-offset="#{$column}"] {
            margin-left: (100/$grid-columns) + ((768px/$grid-columns) * $column);
          }
        }
      }
    }


/*  #Mobile (Portrait)
================================================== */

    /* Note: Design for a width of 320px */

    @media only screen and (max-width: 767px) {

      [data-grid-container] { 
        width: 300px;

        [data-grid-row] {
          margin-bottom: 0;
        }

        [data-grid-columns], [data-grid-column] {
          padding:  0;
          margin-bottom: 1.5em;
        }

        @for $column from 1 through $grid-columns {
          [data-grid-column="#{$column}"] {
            width: 100%;
          }
        }

        @for $column from 1 through ($grid-columns - 1) {
          [data-grid-offset="#{$column}"] {
            margin-left: (100/$grid-columns) + ((100/$grid-columns) * $column);
          }
        }
      }
    }


/* #Mobile (Landscape)
================================================== */

    /* Note: Design for a width of 480px */

    @media only screen and (min-width: 480px) and (max-width: 767px) {

      [data-grid-container] { 
        width: 90%;

        [data-grid-row] {
          margin-bottom: 0;
        }

        [data-grid-columns], [data-grid-column] {
          padding:  0;
          margin-bottom: 1.5em;
        }

        @for $column from 1 through $grid-columns {
          [data-grid-column="#{$column}"] {
            width: 100%;
          }
        }

        @for $column from 1 through ($grid-columns - 1) {
          [data-grid-offset="#{$column}"] {
            margin-left: (100/$grid-columns) + ((100/$grid-columns) * $column);
          }
        }
      }
    }


/* #Clearing
================================================== */

    /* Self Clearing Goodness */
    .container:after { content: "\0020"; display: block; height: 0; clear: both; visibility: hidden; }

    /* Use clearfix class on parent to clear nested columns,
    or wrap each row of columns in a <div class="row"> */
    .clearfix:before,
    .clearfix:after,
    .row:before,
    .row:after {
      content: '\0020';
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0; }
    .row:after,
    .clearfix:after {
      clear: both; }
    .row,
    .clearfix {
      zoom: 1; }

    /* You can also use a <br class="clear" /> to clear columns */
    .clear {
      clear: both;
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0;
    }